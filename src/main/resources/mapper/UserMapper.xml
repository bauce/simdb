<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yy.simdb.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.yy.simdb.entity.User">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="username" jdbcType="CHAR" property="username" />
    <result column="password" jdbcType="CHAR" property="password" />
    <result column="role_id" jdbcType="INTEGER" property="roleId" />
    <result column="phone" jdbcType="CHAR" property="phone" />
    <result column="email" jdbcType="CHAR" property="email" />
  </resultMap>
  <resultMap id="User" extends="BaseResultMap" type="com.yy.simdb.entity.User">
    <collection property="works" ofType="Work" resultMap="com.yy.simdb.dao.WorkMapper.ResultMapWithBLOBs">
    </collection>
  </resultMap>

  <select id="login" resultMap="BaseResultMap">
    select * from user
    <where>
      <if test="username != null">
        and username = #{username}
      </if>
      <if test="password != null">
        and password = #{password}
      </if>
    </where>
  </select>

  <select id="getAllUserList" resultMap="BaseResultMap" parameterType="com.yy.simdb.entity.UserSearch">
    select * from user
    <where>
      <if test="null != username and '' != username">
        and username like "%"#{username}"%"
      </if>
      <if test="null != roleId and '' != roleId">
        and role_id = #{roleId}
      </if>
    </where>
  </select>


  <update id="updateUser" parameterType="User">
    update user
    <set>
      <if test="null != username and '' != username">
        username = #{username},
      </if>
      <if test="null != password and '' != password">
        password = #{password},
      </if>
      <if test="null != phone and '' != phone">
        phone = #{phone},
      </if>
      <if test="null != roleId and '' != roleId">
        role_id = #{roleId},
      </if>
      <if test="null != email and '' != email">
        email = #{email},
      </if>
    </set>
    where user_id = #{userId}
  </update>

  <delete id="deleteById">
    delete from user
    where user_id = #{userId}
  </delete>

  <select id="getUserByUsername" resultType="java.lang.Integer">
    select count(*) from user
    where username =#{username}
  </select>
  <resultMap id="userMini" type="UserMini">
    <id column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="username" jdbcType="CHAR" property="username" />
  </resultMap>
  <select id="getUserList" resultMap="userMini">
    select user_id,username from user
  </select>
  <!--<insert id="insUser" parameterType="User">
    insert into user (username,password,role_id,phone,email)
    values (#{username},#{password},#{roleId},#{phone},#{email})
  </insert>-->
  <select id="getUserByUserId" parameterType="int" resultMap="User">
    select
    w.*,
    u.*
    from work w,user u
    where w.user_id =u.user_id and u.user_id= #{id}
  </select>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, username, password, role_id, phone, email
  </sql>
  <select id="selectByExample" parameterType="com.yy.simdb.entity.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user
    where user_id = #{userId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from user
    where user_id = #{userId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yy.simdb.entity.UserExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yy.simdb.entity.User">
    insert into user (user_id, username, password, 
      role_id, phone, email)
    values (#{userId,jdbcType=INTEGER}, #{username,jdbcType=CHAR}, #{password,jdbcType=CHAR}, 
      #{roleId,jdbcType=INTEGER}, #{phone,jdbcType=CHAR}, #{email,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yy.simdb.entity.User">
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=CHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=CHAR},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=CHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yy.simdb.entity.UserExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=CHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=CHAR},
      </if>
      <if test="record.roleId != null">
        role_id = #{record.roleId,jdbcType=INTEGER},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=CHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set user_id = #{record.userId,jdbcType=INTEGER},
      username = #{record.username,jdbcType=CHAR},
      password = #{record.password,jdbcType=CHAR},
      role_id = #{record.roleId,jdbcType=INTEGER},
      phone = #{record.phone,jdbcType=CHAR},
      email = #{record.email,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yy.simdb.entity.User">
    update user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=CHAR},
      </if>
      <if test="null != password and '' != password">
        password = #{password,jdbcType=CHAR},
      </if>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=CHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=CHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yy.simdb.entity.User">
    update user
    set username = #{username,jdbcType=CHAR},
      password = #{password,jdbcType=CHAR},
      role_id = #{roleId,jdbcType=INTEGER},
      phone = #{phone,jdbcType=CHAR},
      email = #{email,jdbcType=CHAR}
    where user_id = #{userId,jdbcType=INTEGER}
  </update>
</mapper>