<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yy.simdb.dao.WorkMapper">
  <resultMap id="BaseResultMap" type="com.yy.simdb.entity.Work">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="no" jdbcType="CHAR" property="no" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="origin" jdbcType="CHAR" property="origin" />
    <result column="due_time" jdbcType="DATE" property="dueTime" />
    <result column="due_time_alt" jdbcType="CHAR" property="dueTimeAlt" />
    <result column="finished" jdbcType="TINYINT" property="finished" />
    <result column="other" jdbcType="CHAR" property="other" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yy.simdb.entity.Work">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <select id="getAllWorkList" resultMap="ResultMapWithBLOBs">
    select * from work
    <where>
      <if test="type != null and '' != type">
        and type = #{type}
      </if>
      <if test="no != null and ''!=no">
        and no = #{no}
      </if>
      <if test="dueTimeAlt !=null and '' != dueTimeAlt">
        and dueTimeAlt like '%${dueTimeAlt}%'
      </if>
      <if test="finished != null and ''!= finished">
        and finished = #{finished}
      </if>
    </where>
  </select>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, no, type, origin, due_time, due_time_alt, finished, other
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yy.simdb.entity.WorkExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yy.simdb.entity.WorkExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from work
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from work
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yy.simdb.entity.WorkExample">
    delete from work
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yy.simdb.entity.Work">
    insert into work (id, no, type, origin, 
      due_time, due_time_alt, finished, 
      other, content)
    values (#{id,jdbcType=INTEGER}, #{no,jdbcType=CHAR}, #{type,jdbcType=INTEGER}, #{origin,jdbcType=CHAR}, 
      #{dueTime,jdbcType=DATE}, #{dueTimeAlt,jdbcType=CHAR}, #{finished,jdbcType=TINYINT}, 
      #{other,jdbcType=CHAR}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yy.simdb.entity.Work">
    insert into work
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="no != null">
        no,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="origin != null">
        origin,
      </if>
      <if test="dueTime != null">
        due_time,
      </if>
      <if test="dueTimeAlt != null">
        due_time_alt,
      </if>
      <if test="finished != null">
        finished,
      </if>
      <if test="other != null">
        other,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="no != null">
        #{no,jdbcType=CHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="origin != null">
        #{origin,jdbcType=CHAR},
      </if>
      <if test="dueTime != null">
        #{dueTime,jdbcType=DATE},
      </if>
      <if test="dueTimeAlt != null">
        #{dueTimeAlt,jdbcType=CHAR},
      </if>
      <if test="finished != null">
        #{finished,jdbcType=TINYINT},
      </if>
      <if test="other != null">
        #{other,jdbcType=CHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yy.simdb.entity.WorkExample" resultType="java.lang.Long">
    select count(*) from work
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update work
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.no != null">
        no = #{record.no,jdbcType=CHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.origin != null">
        origin = #{record.origin,jdbcType=CHAR},
      </if>
      <if test="record.dueTime != null">
        due_time = #{record.dueTime,jdbcType=DATE},
      </if>
      <if test="record.dueTimeAlt != null">
        due_time_alt = #{record.dueTimeAlt,jdbcType=CHAR},
      </if>
      <if test="record.finished != null">
        finished = #{record.finished,jdbcType=TINYINT},
      </if>
      <if test="record.other != null">
        other = #{record.other,jdbcType=CHAR},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update work
    set id = #{record.id,jdbcType=INTEGER},
      no = #{record.no,jdbcType=CHAR},
      type = #{record.type,jdbcType=INTEGER},
      origin = #{record.origin,jdbcType=CHAR},
      due_time = #{record.dueTime,jdbcType=DATE},
      due_time_alt = #{record.dueTimeAlt,jdbcType=CHAR},
      finished = #{record.finished,jdbcType=TINYINT},
      other = #{record.other,jdbcType=CHAR},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update work
    set id = #{record.id,jdbcType=INTEGER},
      no = #{record.no,jdbcType=CHAR},
      type = #{record.type,jdbcType=INTEGER},
      origin = #{record.origin,jdbcType=CHAR},
      due_time = #{record.dueTime,jdbcType=DATE},
      due_time_alt = #{record.dueTimeAlt,jdbcType=CHAR},
      finished = #{record.finished,jdbcType=TINYINT},
      other = #{record.other,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yy.simdb.entity.Work">
    update work
    <set>
      <if test="no != null">
        no = #{no,jdbcType=CHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="origin != null">
        origin = #{origin,jdbcType=CHAR},
      </if>
      <if test="dueTime != null">
        due_time = #{dueTime,jdbcType=DATE},
      </if>
      <if test="dueTimeAlt != null">
        due_time_alt = #{dueTimeAlt,jdbcType=CHAR},
      </if>
      <if test="finished != null">
        finished = #{finished,jdbcType=TINYINT},
      </if>
      <if test="other != null">
        other = #{other,jdbcType=CHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yy.simdb.entity.Work">
    update work
    set no = #{no,jdbcType=CHAR},
      type = #{type,jdbcType=INTEGER},
      origin = #{origin,jdbcType=CHAR},
      due_time = #{dueTime,jdbcType=DATE},
      due_time_alt = #{dueTimeAlt,jdbcType=CHAR},
      finished = #{finished,jdbcType=TINYINT},
      other = #{other,jdbcType=CHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yy.simdb.entity.Work">
    update work
    set no = #{no,jdbcType=CHAR},
      type = #{type,jdbcType=INTEGER},
      origin = #{origin,jdbcType=CHAR},
      due_time = #{dueTime,jdbcType=DATE},
      due_time_alt = #{dueTimeAlt,jdbcType=CHAR},
      finished = #{finished,jdbcType=TINYINT},
      other = #{other,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>