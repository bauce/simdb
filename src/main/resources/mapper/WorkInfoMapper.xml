<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yy.simdb.dao.WorkInfoMapper">
  <resultMap id="BaseResultMap" type="com.yy.simdb.entity.WorkInfo">
    <id column="work_info_id" jdbcType="INTEGER" property="workInfoId" />
    <result column="wid" jdbcType="INTEGER" property="wid" />
    <result column="create_time" jdbcType="DATE" property="createTime" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="finished" jdbcType="TINYINT" property="finished" />
    <result column="date" jdbcType="DATE" property="date" />
    <result column="bgs_comment" jdbcType="CHAR" property="bgsComment" />
    <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yy.simdb.entity.WorkInfo">
    <result column="info" jdbcType="LONGVARCHAR" property="info" />
  </resultMap>

  <resultMap extends="ResultMapWithBLOBs" id="workInfo" type="com.yy.simdb.entity.WorkInfo">
    <association property="work" javaType="Work">
      <id column="work_id" jdbcType="INTEGER" property="workId" />
      <result column="no" jdbcType="CHAR" property="no" />
      <result column="type" jdbcType="INTEGER" property="type" />
      <result column="origin" jdbcType="CHAR" property="origin" />
      <result column="user_id" jdbcType="INTEGER" property="userId" />
      <result column="w_create_time" jdbcType="DATE" property="createTime" />
      <result column="due_time" jdbcType="DATE" property="dueTime" />
      <result column="due_time_alt" jdbcType="CHAR" property="dueTimeAlt" />
      <result column="w_finished" jdbcType="TINYINT" property="finished" />
      <result column="finish_time" jdbcType="DATE" property="finishTime" />
      <result column="other" jdbcType="CHAR" property="other" />
    </association>
  </resultMap>

  <select id="getInfoByWorkId" parameterType="int" resultMap="workInfo">
    select
    wi.*,
    w.work_id,
    w.no,
    w.type ,
    w.content,
    w.origin,
    w.user_id,
    w.create_time as w_create_time,
    w.due_time,
    w.due_time_alt,
    w.finished as w_finished,
    w.finish_time,
    w.other
    from
    work w,
    work_info wi
    where w.work_id = wi.wid and wid = #{id} and wi.status &lt; 3
  </select>

  <resultMap extends="ResultMapWithBLOBs" id="InfoWithWork" type="com.yy.simdb.entity.WorkInfo">
    <association property="work" javaType="Work">
      <id column="work_id" jdbcType="INTEGER" property="workId" />
      <result column="no" jdbcType="CHAR" property="no" />
      <result column="type" jdbcType="INTEGER" property="type" />
      <result column="content" jdbcType="LONGVARCHAR" property="content" />
      <result column="origin" jdbcType="CHAR" property="origin" />
      <result column="user_id" jdbcType="INTEGER" property="userId" />
      <result column="w_create_time" jdbcType="DATE" property="createTime" />
      <result column="due_time" jdbcType="DATE" property="dueTime" />
      <result column="due_time_alt" jdbcType="CHAR" property="dueTimeAlt" />
      <result column="w_finished" jdbcType="TINYINT" property="finished" />
      <result column="finish_time" jdbcType="DATE" property="finishTime" />
      <result column="other" jdbcType="CHAR" property="other" />
    </association>
  </resultMap>

  <select id="getLastInfoWithWork" resultMap="InfoWithWork" parameterType="com.yy.simdb.entity.WorkInfoSearch">
    SELECT * FROM
    (SELECT
    wi.*,
    w.work_id,
    w.no,w.type,
    w.content,
    w.origin,
    w.user_id,
    w.create_time as w_create_time,
    w.due_time,
    w.due_time_alt,
    w.finished as w_finished,
    w.finish_time,
    w.other
    from
    work w
    LEFT OUTER JOIN work_info wi on wi.wid =w.work_id
    <where>
      <if test="null != userId and '' != userId">
        and user_id = #{userId}
      </if>
      <if test="null != workId and '' !=  workId">
        and work_id = #{workId}
      </if>
      <if test="null != status and '' !=  status">
        and status = #{status}
      </if>
      <if test="null != type and '' !=  type">
        and type = #{type}
      </if>
      <if test="originKey != null and '' !=  originKey">
        and origin like "%"#{originKey}"%"
      </if>
      <if test="contentKey != null and '' != contentKey">
        and content like "%"#{contentKey}"%"
      </if>
      <if test="dueTime !=null and '' != dueTime">
        and due_time_ = #{dueTime}
      </if>
      <if test="dueTimeAlt !=null and '' != dueTimeAlt">
        and due_time_alt like "%"#{dueTimeAlt}"%"
      </if>
      <if test="finished !=null and '' != finished">
        and w.finished = #{finished}
      </if>
    </where>
    ORDER BY wi.create_time DESC limit 10000000000) a
    GROUP BY work_id
  </select>



  <select id="getLastInfoByWorkId" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select * from
    (select *
       from work_info
        <where>
          <if test="null != wid and '' !=  wid">
            and wid = #{wid}
          </if>
        </where>
        ORDER BY create_time DESC limit 10000000000) a
    GROUP BY wid
  </select>

  <select id="getInfoByUserId" parameterType="int" resultMap="workInfo">
    select
    wi.*,
    w.work_id,
    w.no,
    w.type ,
    w.content,
    w.origin,
    w.user_id,
    w.create_time as w_create_time,
    w.due_time,
    w.due_time_alt,
    w.finished as w_finished,
    w.finish_time,
    w.other
    from
    work w,
    work_info wi
    where w.work_id = wi.wid and w.user_id = #{id} and wi.status &lt; 3
  </select>

  <insert id="insetAInfoByWid" parameterType="int">
    insert into work_info(wid,create_time,status)
    values
      (#{wid},NOW(),0)
  </insert>

  <insert id="insertInfoListByWids" parameterType="java.util.List">
    insert into work_info(wid,create_time,status)
    values
    <foreach collection="list" index="index" item="item" separator=",">
      (#{item},NOW(),0)
    </foreach>
  </insert>

  <select id="getInfoList" resultMap="workInfo" parameterType="com.yy.simdb.entity.WorkInfoSearch">
    select
    wi.*,
    w.work_id,
    w.no,
    w.type ,
    w.content,
    w.origin,
    w.user_id,
    w.create_time as w_create_time,
    w.due_time,
    w.due_time_alt,
    w.finished as w_finished,
    w.finish_time,
    w.other
    from
    work w,
    work_info wi
    where w.work_id = wi.wid
    <if test="userId != null and '' != userId">
      and w.user_id = #{userId}
    </if>
    <if test="status != null and '' != status and status &lt; 3">
      and wi.status = #{status}
    </if>
    <if test="status != null and '' != status and status &gt; 3">
      and wi.status &lt; 3
    </if>
    <if test="type != null and '' != type">
      and w.type = #{type}
    </if>
  </select>

  <select id="getInfoCount" resultType="java.lang.Integer" parameterType="com.yy.simdb.entity.WorkInfoSearch">
    select count(*) from (
    SELECT * FROM
    (SELECT
    w.*,
    wi.work_info_id,
    wi.wid,
    wi.info,
    wi.create_time as wi_create_time,
    wi.status,
    wi.finished as wi_finished,
    wi.date,
    wi.bgs_comment
    from
    work w
    LEFT JOIN work_info wi on wi.wid =w.work_id
    ORDER BY wi_create_time DESC limit 10000000000) a
    GROUP BY work_id
    <trim prefix="having" suffixOverrides="and">
      <if test="null != userId and '' != userId">
        user_id = #{userId} and
      </if>
      <if test="null != workId and '' !=  workId">
        work_id = #{workId} and
      </if>
      <if test="null != status and '' !=  status">
        <choose>
          <when test='status=="0"'>
            ((work_info_id is null) or (status != 2 and status != 4)) and
          </when>
          <when test='status=="1"'>
            status = 2  and
          </when>
          <when test='status=="2"'>
            status = 4 and
          </when>
        </choose>
      </if>
      <if test="null != type and '' !=  type">
        type = #{type} and
      </if>
      <if test="originKey != null and '' !=  originKey">
        origin like "%"#{originKey}"%" and
      </if>
      <if test="contentKey != null and '' != contentKey">
        content like "%"#{contentKey}"%" and
      </if>
      <if test="dueTime !=null and '' != dueTime">
        due_time_ = #{dueTime} and
      </if>
      <if test="dueTimeAlt !=null and '' != dueTimeAlt">
        due_time_alt like "%"#{dueTimeAlt}"%" and
      </if>
      <if test="finished !=null and '' != finished">
        finished = #{finished} and
      </if>
    </trim>
    )b
  </select>

  <update id="archInfo">
    UPDATE work_info SET status = 5 WHERE wid in
    (SELECT work_id FROM
    (SELECT * FROM
    (SELECT
      work_id,
          status,
          w.finished as w_finished
    from
    work w
		LEFT OUTER JOIN work_info wi on wi.wid =w.work_id  ORDER BY wi.create_time DESC limit 10000000000) a GROUP BY work_id HAVING status =  4 AND w_finished = 0) b)
  </update>
  
  <update id="updateFinished">
    update work set finished = 1 where work_id in
    (SELECT work_id FROM
    (SELECT * FROM
    (SELECT
    work_id,
		status,
		wi.finished as w_finished
    from
    work w
		LEFT OUTER JOIN work_info wi on wi.wid =w.work_id  ORDER BY wi.create_time DESC limit 10000000000) a GROUP BY work_id HAVING  w_finished = 1) b)
  </update>

  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    work_info_id, wid, create_time, status, finished, date, bgs_comment, modify_time
  </sql>
  <sql id="Blob_Column_List">
    info
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.yy.simdb.entity.WorkInfoExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.yy.simdb.entity.WorkInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from work_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from work_info
    where work_info_id = #{workInfoId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from work_info
    where work_info_id = #{workInfoId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yy.simdb.entity.WorkInfoExample">
    delete from work_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yy.simdb.entity.WorkInfo">
    insert into work_info (work_info_id, wid, create_time, 
      status, finished, date, 
      bgs_comment, modify_time, info
      )
    values (#{workInfoId,jdbcType=INTEGER}, #{wid,jdbcType=INTEGER}, #{createTime,jdbcType=DATE}, 
      #{status,jdbcType=INTEGER}, #{finished,jdbcType=TINYINT}, #{date,jdbcType=DATE}, 
      #{bgsComment,jdbcType=CHAR}, #{modifyTime,jdbcType=TIMESTAMP}, #{info,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.yy.simdb.entity.WorkInfo"
          useGeneratedKeys="true" keyProperty="work_info_id">
    insert into work_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="workInfoId != null">
        work_info_id,
      </if>
      <if test="wid != null">
        wid,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="finished != null">
        finished,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="bgsComment != null">
        bgs_comment,
      </if>
      <if test="modifyTime != null">
        modify_time,
      </if>
      <if test="info != null">
        info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="workInfoId != null">
        #{workInfoId,jdbcType=INTEGER},
      </if>
      <if test="wid != null">
        #{wid,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=DATE},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="finished != null">
        #{finished,jdbcType=TINYINT},
      </if>
      <if test="date != null">
        #{date,jdbcType=DATE},
      </if>
      <if test="bgsComment != null">
        #{bgsComment,jdbcType=CHAR},
      </if>
      <if test="modifyTime != null">
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="info != null">
        #{info,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yy.simdb.entity.WorkInfoExample" resultType="java.lang.Long">
    select count(*) from work_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update work_info
    <set>
      <if test="record.workInfoId != null">
        work_info_id = #{record.workInfoId,jdbcType=INTEGER},
      </if>
      <if test="record.wid != null">
        wid = #{record.wid,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=DATE},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.finished != null">
        finished = #{record.finished,jdbcType=TINYINT},
      </if>
      <if test="record.date != null">
        date = #{record.date,jdbcType=DATE},
      </if>
      <if test="record.bgsComment != null">
        bgs_comment = #{record.bgsComment,jdbcType=CHAR},
      </if>
      <if test="record.modifyTime != null">
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.info != null">
        info = #{record.info,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update work_info
    set work_info_id = #{record.workInfoId,jdbcType=INTEGER},
      wid = #{record.wid,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=DATE},
      status = #{record.status,jdbcType=INTEGER},
      finished = #{record.finished,jdbcType=TINYINT},
      date = #{record.date,jdbcType=DATE},
      bgs_comment = #{record.bgsComment,jdbcType=CHAR},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      info = #{record.info,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update work_info
    set work_info_id = #{record.workInfoId,jdbcType=INTEGER},
      wid = #{record.wid,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=DATE},
      status = #{record.status,jdbcType=INTEGER},
      finished = #{record.finished,jdbcType=TINYINT},
      date = #{record.date,jdbcType=DATE},
      bgs_comment = #{record.bgsComment,jdbcType=CHAR},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yy.simdb.entity.WorkInfo">
    update work_info
    <set>
      <if test="wid != null">
        wid = #{wid,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=DATE},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="finished != null">
        finished = #{finished,jdbcType=TINYINT},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=DATE},
      </if>
      <if test="bgsComment != null">
        bgs_comment = #{bgsComment,jdbcType=CHAR},
      </if>
      <if test="modifyTime != null">
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="info != null">
        info = #{info,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where work_info_id = #{workInfoId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yy.simdb.entity.WorkInfo">
    update work_info
    set wid = #{wid,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=DATE},
      status = #{status,jdbcType=INTEGER},
      finished = #{finished,jdbcType=TINYINT},
      date = #{date,jdbcType=DATE},
      bgs_comment = #{bgsComment,jdbcType=CHAR},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      info = #{info,jdbcType=LONGVARCHAR}
    where work_info_id = #{workInfoId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yy.simdb.entity.WorkInfo">
    update work_info
    set wid = #{wid,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=DATE},
      status = #{status,jdbcType=INTEGER},
      finished = #{finished,jdbcType=TINYINT},
      date = #{date,jdbcType=DATE},
      bgs_comment = #{bgsComment,jdbcType=CHAR},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP}
    where work_info_id = #{workInfoId,jdbcType=INTEGER}
  </update>
</mapper>